/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@piece(DefineGetTangentFrame)
	float4 MultiplyQuaternions(float4 q1, float4 q2)
	{
		float4 result;
		result.w = q1.w * q2.w - dot(q1.xyz, q2.xyz);
		result.xyz = q1.w * q2.xyz + q2.w * q1.xyz + cross(q1.xyz, q2.xyz);
		return result;
	}

	// https://blog.molecular-matters.com/2013/05/24/a-faster-quaternion-vector-multiplication/ mentions as source
	//   "The faster method comes courtesy of Fabian Giesen ( http://fgiesen.wordpress.com/ ) (ryg of Farbrausch fame ( http://www.farbrausch.de/~fg/ )),
	//    who posted this to the MollyRocket forums years ago. Another derivation, yielding the same result, can be found here ( http://gns.wikia.com/wiki/Quaternions )."
	float3 MultiplyQuaternionVector(float4 rotationQuaternion, float3 vertex)
	{
		float3 t = 2.0f * cross(rotationQuaternion.xyz, vertex);
		return vertex + rotationQuaternion.w * t + cross(rotationQuaternion.xyz, t);
	}

	// QTangent basing on http://dev.theomader.com/qtangents/ "QTangents" which is basing on
	// http://www.crytek.com/cryengine/presentations/spherical-skinning-with-dual-quaternions-and-qtangents "Spherical Skinning with Dual-Quaternions and QTangents"
	float2x3 QuaternionToTangentBitangent(float4 q)
	{
		return float2x3(
			1.0f - 2.0f * (q.y * q.y + q.z * q.z),	2.0f * (q.x * q.y + q.w * q.z),			2.0f * (q.x * q.z - q.w * q.y),
			2.0f * (q.x * q.y - q.w * q.z),			1.0f - 2.0f * (q.x * q.x + q.z * q.z),	2.0f * (q.y * q.z + q.w * q.x)
		);
	}

	// QTangent basing on http://dev.theomader.com/qtangents/ "QTangents" which is basing on
	// http://www.crytek.com/cryengine/presentations/spherical-skinning-with-dual-quaternions-and-qtangents "Spherical Skinning with Dual-Quaternions and QTangents"
	float3x3 GetTangentFrame(float4 objectSpaceToViewSpaceQuaternion, float4 qTangent)
	{
		float2x3 tBt = QuaternionToTangentBitangent(qTangent);
		float3 t = MultiplyQuaternionVector(objectSpaceToViewSpaceQuaternion, tBt[0]);
		float3 b = MultiplyQuaternionVector(objectSpaceToViewSpaceQuaternion, tBt[1]);
		return float3x3(
			t,
			b,
			cross(t, b) * (qTangent.w < 0.0f ? -1.0f : 1.0f)
		);
	}
@end
