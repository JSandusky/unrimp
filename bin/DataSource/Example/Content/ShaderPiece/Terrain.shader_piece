/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@piece(DefineTerrainPassDataStruct)
	struct TerrainPassDataStruct
	{
		float4x4 WorldSpaceToClipSpaceMatrix;
		float4x4 WorldSpaceToViewSpaceMatrix;
		float4x4 PreviousWorldSpaceToViewSpaceMatrix;
		float4x4 ShadowMatrix;
		float4   ShadowCascadeOffsets[4];
		float4   ShadowCascadeScales[4];
		float4   ShadowCascadeSplits;
		float4x4 ViewSpaceToClipSpaceMatrix;
		float4	 ViewSpaceToWorldSpaceQuaternion;
		float4	 WorldSpaceToViewSpaceQuaternion;
		float3	 ViewSpaceSunlightDirection;
		float	 Wetness;
		float3	 WorldPosition;
		float3	 WorldSize;
		float3	 AmbientColor;
		float3	 SunlightColor;
		float3   CameraWorldSpacePosition;
		float3	 LightClustersScale;
		float3	 LightClustersBias;
		float2   ViewportSize;
		float2   ProjectionParametersReversedZ;
		uint	 FullCoverageMask;
		float	 TessellatedTriangleWidth;
	};
@end
@piece(DefineWorldXZToHeightUV)
	// Wrappers for displacement map sampling allow us to substitute a 100% procedural surface.
	// VS and DS sampling have to agree and use common code.
	#define TERRAIN_CONTROL_VTX_PER_TILE_EDGE 		9
	#define TERRAIN_RECIP_CONTROL_VTX_PER_TILE_EDGE (1.0f / TERRAIN_CONTROL_VTX_PER_TILE_EDGE)
	#define TERRAIN_PATCHES_PER_TILE_EDGE 			(TERRAIN_CONTROL_VTX_PER_TILE_EDGE - 1)
	float2 WorldXZToHeightUV(float2 worldXZ)
	{
		// Apply terrain world position
		worldXZ -= PassData.WorldPosition.xz;

		// [PassData.WorldSize/2,PassData.WorldSize/2] -> [0.5,0.5]
		worldXZ /= PassData.WorldSize.xz;

		// [0.5,0.5] -> [0,1]
		worldXZ += 0.5f;

		// Done
		return worldXZ;
	}
@end
@piece(DefineSampleHeightMap)
	float SampleHeightMap(float2 worldXZ)
	{
		// You can implement purely procedural terrain here, evaluating the height fn on-the-fly.
		// But for any complex function, with loads of octaves, it's faster to sample from a texture.
		float2 uv = WorldXZToHeightUV(worldXZ);
		return PassData.WorldPosition.y + PassData.WorldSize.y * SAMPLE_2D_LOD(HeightMap, SamplerLinearClamp, float4(uv, 0.0f, 0.0f)).r;
	}
@end
