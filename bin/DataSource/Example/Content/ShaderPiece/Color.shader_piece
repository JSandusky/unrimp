/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
// Approximate luminance from a RGB value
@piece(DefineColorToLuminance)
	float ColorToLuminance(float3 color)
	{
		return max(dot(color, float3(0.299f, 0.587f, 0.114f)), 0.0001f);
	}
@end

// Determine the color based on exposure settings
@piece(DefineCalculateExposedColor)
	float3 CalculateExposedColor(float3 color, float averageLuminance, float threshold, out float exposure)
	{
		// Use geometric mean
		averageLuminance = max(averageLuminance, 0.001f);
		float linearExposure = (PassData.ToneMapKeyValue / averageLuminance);
		exposure = log2(max(linearExposure, 0.0001f));
		exposure -= threshold;
		return exp2(exposure) * color;
	}
@end

// RGB color linear space to gamma space
@piece(DefineLinearSpaceToGammaSpace3)
	float3 LinearSpaceToGammaSpace3(float3 color)
	{
		return SATURATE(pow(abs(color), float3(1.0f / 2.2f, 1.0f / 2.2f, 1.0f / 2.2f)));
	}
@end

// Fog
@piece(DefineCalculateFoggedColor)
	float3 CalculateFoggedColor(float3 viewSpacePosition, float3 color)
	{
		// Traditional depth fog
		// -> Depth fog: Exponential^2 (see e.g. http://developer.download.nvidia.com/assets/gamedev/docs/Fog2.pdf?display=style-table )
		float factor = viewSpacePosition.z * PassData.AtmosphereFogDensity;
		factor *= factor;
		float fogDepth = 1.0f - SATURATE(1.0f / exp(factor));

		// Fog lighting direction
		float3 viewSpaceCameraDirection = -normalize(viewSpacePosition);	// In view space, we always look along the positive z-axis
		float fogDirection = SATURATE(dot(viewSpaceCameraDirection, -PassData.ViewSpaceSunlightDirection));
		fogDirection = pow(fogDirection, 15.0f);

		// Calculate fogged color
		float3 ambientFogDiffuseColor = PassData.AmbientColor * PassData.DiffuseFogColor;
		float3 sunFogDiffuseColor = PassData.SunlightColor * PassData.DiffuseFogColor;
		float3 litFog = LERP(ambientFogDiffuseColor, ambientFogDiffuseColor + sunFogDiffuseColor, fogDirection);
		return LERP(color, litFog, fogDepth);
	}
@end
