/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@piece(DefineGetLinearDepth)
	float GetLinearDepth(float depth)
	{
		return PassData.ProjectionParameters.y / (depth - PassData.ProjectionParameters.x);
	}
@end

@piece(DefineGetLinearDepthByFragmentDepth)
	float GetLinearDepthByFragmentDepth(float fragmentDepth)
	{
		@property(HLSL)
			return PassData.ProjectionParameters.y / (fragmentDepth - PassData.ProjectionParameters.x);
		@end
		@property(!HLSL)
			// OpenGL needs some adjustments
			// -> Direct3D: Left-handed coordinate system with clip space depth value range 0..1
			// -> OpenGL: Right-handed coordinate system with clip space depth value range -1..1
			return PassData.ProjectionParameters.y / ((fragmentDepth * 2.0f - 1.0f) - PassData.ProjectionParameters.x);
		@end
	}
@end

@piece(DefineGetDepthFromDepthMap)
	float GetDepthFromDepthMap(float2 textureCoordinate, int sampleIndex)
	{
		@property(NumberOfMultisamples)
			return SAMPLE_DEPTH_2D_MS(DepthMap, int2(textureCoordinate * (1.0f / PassData.InverseViewportSize)), sampleIndex);
		@end
		@property(!NumberOfMultisamples)
			return SAMPLE_DEPTH_2D_LOD(DepthMap, SamplerPointClamp, float4(textureCoordinate, 0.0f, 0.0f));
		@end
	}
@end

@piece(DefineGetLinearDepthFromDepthMap)
	float GetLinearDepthFromDepthMap(float2 textureCoordinate, int sampleIndex)
	{
		return GetLinearDepth(GetDepthFromDepthMap(textureCoordinate, sampleIndex));
	}
@end
