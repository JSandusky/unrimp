/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Pieces                                                ]
//[-------------------------------------------------------]
@piece(GetObjectSpaceToWorldSpaceMatrix)
	float4 objectSpaceToWorldSpaceMatrix[3];
	uint textureBufferIndex = instanceIndices.x + 3u;

	// First bone
	uint textureBufferBoneOffset = textureBufferIndex + uint(MAIN_INPUT(BlendIndices)[0]) * 3u;
	float boneWeight = float(MAIN_INPUT(BlendWeights)[0]) / 255.0f;	// 8 bit bone weights decoding
	objectSpaceToWorldSpaceMatrix[0] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * boneWeight;
	objectSpaceToWorldSpaceMatrix[1] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * boneWeight;
	objectSpaceToWorldSpaceMatrix[2] = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * boneWeight;

	// The other bones
	for (int i = 1; i < 4; ++i)
	{
		textureBufferBoneOffset = textureBufferIndex + uint(MAIN_INPUT(BlendIndices)[i]) * 3u;
		boneWeight = float(MAIN_INPUT(BlendWeights)[i]) / 255.0f;	// 8 bit bone weights decoding
		objectSpaceToWorldSpaceMatrix[0] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 0u) * boneWeight;
		objectSpaceToWorldSpaceMatrix[1] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 1u) * boneWeight;
		objectSpaceToWorldSpaceMatrix[2] += TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, textureBufferBoneOffset + 2u) * boneWeight;
	}

	// Transform position
	float3 transformedPosition;
	transformedPosition.x = dot(objectSpaceToWorldSpaceMatrix[0], float4(objectSpacePosition, 1.0f));
	transformedPosition.y = dot(objectSpaceToWorldSpaceMatrix[1], float4(objectSpacePosition, 1.0f));
	transformedPosition.z = dot(objectSpaceToWorldSpaceMatrix[2], float4(objectSpacePosition, 1.0f));
	objectSpacePosition = transformedPosition;
@end
