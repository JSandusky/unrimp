/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


@property(UseAlphaMap)
	//[-------------------------------------------------------]
	//[ Define pieces                                         ]
	//[-------------------------------------------------------]
	// TODO(co) Define this outside
	@piece(MaximumNumberOfMaterials)2@end


	//[-------------------------------------------------------]
	//[ Input / output                                        ]
	//[-------------------------------------------------------]
	// Attribute input / output
	INPUT_BEGIN
		INPUT_TEXTURE_COORDINATE_NOINTERPOLATION(1, uint,   AssignedMaterialSlotVS, 0)	// The assigned material slot inside the material uniform buffer
		INPUT_TEXTURE_COORDINATE				(2, float2, TexCoordVS,				1)	// Texture coordinate
	INPUT_END

	// Uniform buffers
	struct Material
	{
		float AlphaReference;
	};
	UNIFORM_BUFFER_BEGIN(1, 0, MaterialUniformBuffer, 1)
		Material Materials[FAST_SHADER_BUILD_HACK(@insertpiece(MaximumNumberOfMaterials))];
	UNIFORM_BUFFER_END

	// Textures: We need to start at texture unit 1 instead of texture unit 0 because the vertex shader has an instance texture buffer bound at texture unit 0 (OpenGL shares those bindings accros all shader stages while Direct3D doesn't)
	TEXTURE_2D(3, 0, AlphaMap, 1)

	// Samplers
	SAMPLER_STATE(4, 0, SamplerLinear, 0)
@end
@property(!UseAlphaMap)
	//[-------------------------------------------------------]
	//[ Input / output                                        ]
	//[-------------------------------------------------------]
	// Attribute input / output
	INPUT_BEGIN
	INPUT_END
@end


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_NO_OUTPUT
	@property(UseAlphaMap)
		// Get the used material
		Material material = Materials[MAIN_INPUT(AssignedMaterialSlotVS)];

		// Perform alpha map based fragment rejection
		if (material.AlphaReference >= SAMPLE_2D(AlphaMap, SamplerLinear, MAIN_INPUT(TexCoordVS)).r)
		{
			discard;
		}
	@end
MAIN_END_NO_OUTPUT
