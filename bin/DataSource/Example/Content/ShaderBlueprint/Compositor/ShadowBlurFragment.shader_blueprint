/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	int   ShadowMapSize;
	float ShadowFilterSize;
	int   ShadowSampleRadius;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
@property(VerticalBlur)
	TEXTURE_2D(1, 0, ColorMap, 0)
@end
@property(!VerticalBlur)
	TEXTURE_2D_ARRAY(1, 0, ColorMap, 0)
@end


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
float4 BlurSample(float2 screenPosition, float offset, float mapSize)
{
	@property(VerticalBlur)
		float2 samplePosition = screenPosition;
		samplePosition.y = clamp(screenPosition.y + offset, 0.0f, mapSize);
		return TEXTURE_FETCH_2D(ColorMap, int3(samplePosition, 0)); 
	@end
	@property(!VerticalBlur)
		float2 samplePosition = screenPosition;
		samplePosition.x = clamp(screenPosition.x + offset, 0.0f, mapSize);
		const float INTERMEDIATE_CASCADE_INDEX = 3.0f;
		return TEXTURE_FETCH_ARRAY(ColorMap, int4(samplePosition, 3, 0)); 
	@end
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	float radius = PassData.ShadowFilterSize * 0.5f;
	float4 sum = float4(0.0f, 0.0f, 0.0f, 0.0f);

	for (int i = -PassData.ShadowSampleRadius; i <= PassData.ShadowSampleRadius; ++i)
	{
		float4 sampleValue = BlurSample(FRAGMENT_POSITION.xy, float(i), float(PassData.ShadowMapSize));
		sampleValue *= SATURATE((radius + 0.5f) - float(abs(i)));
		sum += sampleValue;
	}

	// Done
	MAIN_OUTPUT_COLOR(0) = sum / PassData.ShadowFilterSize;
MAIN_END
