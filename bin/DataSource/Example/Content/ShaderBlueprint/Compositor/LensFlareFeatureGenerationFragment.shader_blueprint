/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float2 InverseViewportSize;
	int    NumberOfGhostSamples;
	float  GhostDispersalFactor;
	float  ChromaticDistortion;
	float  HaloWidth;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
TEXTURE_1D(1, 1, LensColorMap, 1)

// Samplers
SAMPLER_STATE(2, 0, SamplerLinear, 0)
SAMPLER_STATE(2, 1, SamplerPoint, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
float3 GetDistortedTexture(float2 textureCoordinate, float2 direction, float3 distortion)
{
	return float3(
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(textureCoordinate + direction * distortion.r, 0.0f, 0.0f)).r,
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(textureCoordinate + direction * distortion.g, 0.0f, 0.0f)).g,
		SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(textureCoordinate + direction * distortion.b, 0.0f, 0.0f)).b
	);
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	float2 textureCoordinate = MAIN_INPUT(TexCoordVS);
	float2 texelSize = PassData.InverseViewportSize;

	float2 ghostVector = (float2(0.5f, 0.5f) - textureCoordinate) * PassData.GhostDispersalFactor;
	float2 normalizedGhostVector = normalize(ghostVector);
	float2 haloVec = normalizedGhostVector * PassData.HaloWidth;

	float3 distortion = float3(-texelSize.x * PassData.ChromaticDistortion, 0.0, texelSize.x * PassData.ChromaticDistortion);
	float halfVectorLength = length(float2(0.5f, 0.5f));

	// Sample ghosts
	float3 result = float3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i < PassData.NumberOfGhostSamples; ++i)
	{
		float2 offset = frac(textureCoordinate + ghostVector * float(i));

		// Linear falloff
		float weight = SATURATE(length(float2(0.5f, 0.5f) - offset) / halfVectorLength);
		weight = pow(1.0f - weight, 10.0f);

		result += GetDistortedTexture(offset, normalizedGhostVector, distortion) * weight;
	}

	// Tint ghost
	result *= SAMPLE_1D_LOD(LensColorMap, SamplerPoint, float4(length(float2(0.5f, 0.5f) - textureCoordinate) / halfVectorLength, 0.0f, 0.0f, 0.0f)).bgr;

	// Sample halo
	float weight = SATURATE(length(float2(0.5f, 0.5f) - frac(textureCoordinate + haloVec)) / halfVectorLength);
	weight = pow(1.0f - weight, 10.0f);
	result += GetDistortedTexture(frac(textureCoordinate + haloVec), normalize(ghostVector), distortion) * weight;

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(result, 1.0f);
MAIN_END
