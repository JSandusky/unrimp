/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


/*
This vertex shader also passes through a view space ray used for view space position reconstruction.
Without it reconstructing the view space position would be more expensive by using the clip space to view space matrix as follows:

float3 GetViewSpacePositionByScreenSpacePosition(float2 screenSpacePosition, float depth)
{
	// API coordinate system related differences
	@property(HLSL)
		screenSpacePosition.y = 1.0f - screenSpacePosition.y;
	@end
	@property(GLSL || GLSLES)
		// 0..1 -> -1..1
		depth = depth * 2.0f - 1.0f;
	@end

	// Get x/w and y/w from the screen space position
	float x = screenSpacePosition.x * 2.0f - 1.0f;
	float y = screenSpacePosition.y * 2.0f - 1.0f;
	float4 projectedPosition = float4(x, y, depth, 1.0f);

	// Get view-space position
	float4 inversePosition = MATRIX_MUL(PassData.ClipSpaceToViewSpaceMatrix, projectedPosition);
	return inversePosition.xyz / inversePosition.w;
}

For more background formation regarding reconstructing position from depth please have a look at:
- "The Danger Zone" - "Scintillating Snippets: Reconstructing Position From Depth" - "Written by MJPMarch 10, 2009" - https://mynameismjp.wordpress.com/2009/03/10/reconstructing-position-from-depth/
- "The Danger Zone" - "Reconstructing Position From Depth, Continued" - "Written by MJPMay 5, 2009" - https://mynameismjp.wordpress.com/2009/05/05/reconstructing-position-from-depth-continued/
- "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
*/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_ID
	INPUT_VERTEX_POSITION(0, float4, PositionTexCoord)	// xy = position, zw = texture coordinate
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	OUTPUT_TEXTURE_COORDINATE(2, float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
	OUTPUT_POSITION			 (0)						// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4 ViewSpaceFrustumCorners[4];
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Clip space vertex positions of the full screen triangle, left/bottom is (-1,-1) and right/top is (1,1)
	//								Vertex ID	Triangle on screen
	//	-1.0f,  1.0f, 0.0f, 0.0f,	0			  0.......1
	//	 3.0f,  1.0f, 2.0f, 0.0f,	1			  .   .
	//	-1.0f, -3.0f, 0.0f, 2.0f	2			  2

	// Transform the object space vertex into clip space
	MAIN_OUTPUT_POSITION = float4(MAIN_INPUT(PositionTexCoord).xy, 0.0f, 1.0f);
	@property(GLSL || GLSLES)
		MAIN_OUTPUT_POSITION.y = -MAIN_OUTPUT_POSITION.y;
	@end

	// Pass through the texture coordinates
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(PositionTexCoord.zw);

	// Pass through the view space ray used for view space position reconstruction
	MAIN_OUTPUT(ViewRayVS) = PassData.ViewSpaceFrustumCorners[MAIN_INPUT_VERTEX_ID].xyz;
MAIN_END
