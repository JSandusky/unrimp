/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


// Unrimp port of "MSAA Resolve + Temporal AA" from https://github.com/TheRealMJP/MSAAFilter with background information at https://mynameismjp.wordpress.com/2012/10/28/msaa-resolve-filters/
// -> Have a look at the original MSAA filter example for much more options and a nice GUI for experimenting with settings


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)

@property(NumberOfMultisamples)
	#define MSAA_LOAD(name, coordinate, sampleIndex) SAMPLE_2D_MS(name, int2(coordinate), sampleIndex)
	#define NUMBER_OF_MSAA_SAMPLES @value(NumberOfMultisamples)
@end
@property(!NumberOfMultisamples)
	#define MSAA_LOAD(name, coordinate, sampleIndex) TEXTURE_FETCH_2D(name, int3(coordinate, 0))
	#define NUMBER_OF_MSAA_SAMPLES 1
@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	DECLARE_FRAGMENT_POSITION
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float2 ViewportSize;
	float2 JitterOffset;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(1, 0, ColorMap, NUMBER_OF_MSAA_SAMPLES, 0)
	TEXTURE_2D_MS(1, 1, DepthMap, NUMBER_OF_MSAA_SAMPLES, 1)
	TEXTURE_2D_MS(1, 2, VelocityMap, NUMBER_OF_MSAA_SAMPLES, 2)
@end
@property(!NumberOfMultisamples)
	TEXTURE_2D(1, 0, ColorMap, 0)
	TEXTURE_2D(1, 1, DepthMap, 1)
	TEXTURE_2D(1, 2, VelocityMap, 2)
@end
TEXTURE_2D(1, 3, PreviousColorMap, 3)

// Samplers
SAMPLER_STATE(2, 0, SamplerPoint, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Color.asset)
	@insertpiece(DefineColorToLuminance)

// From "Temporal Reprojection Anti-Aliasing": https://github.com/playdeadgames/temporal
float3 ClipAabb(float3 aabbMin, float3 aabbMax, float3 previousSample)
{
	// Note: Only clips towards AABB center (but fast!)
	float3 pClip = 0.5f * (aabbMax + aabbMin);
	float3 eClip = 0.5f * (aabbMax - aabbMin);

	// Avoid floating point division by zero
	eClip = max(float3(0.001f, 0.001f, 0.001f), eClip);

	float3 vClip = previousSample - pClip;
	float3 vUnit = vClip.xyz / eClip;
	float3 aUnit = abs(vUnit);
	float maUnit = max(aUnit.x, max(aUnit.y, aUnit.z));

	if (maUnit > 1.0)
	{
		return pClip + vClip / maUnit;
	}
	else
	{
		// Point inside AABB
		return previousSample;
	}
}

float FilterCubic(float x, float b, float c)
{
	float y = 0.0f;
	float x2 = x * x;
	float x3 = x * x * x;
	if (x < 1.0f)
	{
		y = (12.0f - 9.0f * b - 6.0f * c) * x3 + (-18.0f + 12.0f * b + 6.0f * c) * x2 + (6.0f - 2.0f * b);
	}
	else if (x <= 2.0f)
	{
		y = (-b - 6.0f * c) * x3 + (6.0f * b + 30.0f * c) * x2 + (-12.0f * b - 48.0f * c) * x + (8.0f * b + 24.0f * c);
	}

	return y / 6.0f;
}

float ResolveFilter(float x)
{
	// B-Spline
	// -> Cubic filters naturually work in a [-2, 2] domain. For the resolve case we want to rescale the filter so that it works in [-1, 1] instead
	return FilterCubic(x * 2.0f, 1.0f, 0.0f);
}

float ReprojectionFilter(float x)
{
	// Catmull-Rom
	return FilterCubic(x, 0.0f, 0.5f);
}

float3 Reproject(float2 fragmentPosition)
{
	float2 velocity = float2(0.0f, 0.0f);

	{ // Dilation mode: Dilate nearest depth
		float closestDepth = 10.0f;
		for (int vy = -1; vy <= 1; ++vy)
		{
			for (int vx = -1; vx <= 1; ++vx)
			{
				UNROLL_HINT
				for (int sampleIndex = 0; sampleIndex < NUMBER_OF_MSAA_SAMPLES; ++sampleIndex)
				{
					float2 neighborVelocity = MSAA_LOAD(VelocityMap, int2(fragmentPosition) + int2(vx, vy), sampleIndex).xy;
					float neighborDepth = MSAA_LOAD(DepthMap, int2(fragmentPosition) + int2(vx, vy), sampleIndex).r;
					if (neighborDepth < closestDepth)
					{
						velocity = neighborVelocity;
						closestDepth = neighborDepth;
					}
				}
			}
		}
	}

	velocity = velocity * PassData.ViewportSize + PassData.JitterOffset;
	float2 reprojectedPos = fragmentPosition - velocity;
	float2 reprojectedUV = reprojectedPos / PassData.ViewportSize;

	{ // None standard reprojection
		float3 sum = float3(0.0f, 0.0f, 0.0f);
		float totalWeight = 0.0f;

		for (int ty = -1; ty <= 2; ++ty)
		{
			for (int tx = -1; tx <= 2; ++tx)
			{
				float2 samplePosition = floor(reprojectedPos + float2(tx, ty)) + float2(0.5f, 0.5f);
				float3 reprojectedSample = TEXTURE_FETCH_2D(PreviousColorMap, int3(samplePosition, 0)).xyz;

				float2 sampleDist = abs(samplePosition - reprojectedPos);
				float filterWeight = ReprojectionFilter(sampleDist.x) * ReprojectionFilter(sampleDist.y);

				float sampleLum = ColorToLuminance(reprojectedSample);

				// Inverse luminance filtering
				filterWeight *= 1.0f / (1.0f + sampleLum);

				sum += reprojectedSample * filterWeight;
				totalWeight += filterWeight;
			}
		}

		return max(sum / totalWeight, 0.0f);
	}
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Fixed build in settings, too technical for an artist to be tweakable
	const float RESOLVE_FILTER_DIAMETER = 2.0f;
	const float VARIANCE_CLIP_GAMMA = 1.5f;
	const float TEMPORAL_AA_BLEND_FACTOR = 0.9f;

	// These are the sub-sample locations for the 2x, 4x, and 8x standard multisample patterns
	// -> See the MSDN documentation for the D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS enumeration
	#if NUMBER_OF_MSAA_SAMPLES == 8
		float2 SUB_SAMPLES_OFFSETS[8];
		SUB_SAMPLES_OFFSETS[0] = float2( 0.0625f, -0.1875f);
		SUB_SAMPLES_OFFSETS[1] = float2(-0.0625f,  0.1875f);
		SUB_SAMPLES_OFFSETS[2] = float2( 0.3125f,  0.0625f);
		SUB_SAMPLES_OFFSETS[3] = float2(-0.1875f, -0.3125f);
		SUB_SAMPLES_OFFSETS[4] = float2(-0.3125f,  0.3125f);
		SUB_SAMPLES_OFFSETS[5] = float2(-0.4375f, -0.0625f);
		SUB_SAMPLES_OFFSETS[6] = float2( 0.1875f,  0.4375f);
		SUB_SAMPLES_OFFSETS[7] = float2( 0.4375f, -0.4375f);
	#elif NUMBER_OF_MSAA_SAMPLES == 4
		float2 SUB_SAMPLES_OFFSETS[4];
		SUB_SAMPLES_OFFSETS[0] = float2(-0.125f, -0.375f);
		SUB_SAMPLES_OFFSETS[1] = float2( 0.375f, -0.125f);
		SUB_SAMPLES_OFFSETS[2] = float2(-0.375f,  0.125f);
		SUB_SAMPLES_OFFSETS[3] = float2( 0.125f,  0.375f);
	#elif NUMBER_OF_MSAA_SAMPLES == 2
		float2 SUB_SAMPLES_OFFSETS[2];
		SUB_SAMPLES_OFFSETS[0] = float2( 0.25f,  0.25f);
		SUB_SAMPLES_OFFSETS[1] = float2(-0.25f, -0.25f);
	#else
		float2 SUB_SAMPLES_OFFSETS[1];
		SUB_SAMPLES_OFFSETS[0] = float2(0.0f, 0.0f);
	#endif

	float2 fragmentPosition = FRAGMENT_POSITION.xy;
	float3 sum = float3(0.0f, 0.0f, 0.0f);
	float totalWeight = 0.0f;

	float3 clrMin = float3(99999999.0f, 99999999.0f, 99999999.0f);
	float3 clrMax = float3(-99999999.0f, -99999999.0f, -99999999.0f);

	float3 m1 = float3(0.0f, 0.0f, 0.0f);
	float3 m2 = float3(0.0f, 0.0f, 0.0f);
	float mWeight = 0.0f;

	@property(NumberOfMultisamples)
		const int SAMPLE_RADIUS = 3;
	@end
	@property(!NumberOfMultisamples)
		const int SAMPLE_RADIUS = 1;
	@end

	const float filterRadius = RESOLVE_FILTER_DIAMETER / 2.0f;

	for (int y = -SAMPLE_RADIUS; y <= SAMPLE_RADIUS; ++y)
	{
		for (int x = -SAMPLE_RADIUS; x <= SAMPLE_RADIUS; ++x)
		{
			float2 sampleOffset = float2(x, y);
			float2 samplePosition = fragmentPosition + sampleOffset;
			samplePosition = clamp(samplePosition, float2(0.0f, 0.0f), PassData.ViewportSize - 1.0f);

			UNROLL_HINT
			for (int subSampleIndex = 0; subSampleIndex < NUMBER_OF_MSAA_SAMPLES; ++subSampleIndex)
			{
				float2 subSampleOffset = SUB_SAMPLES_OFFSETS[subSampleIndex].xy;
				float2 sampleDist = abs(sampleOffset + subSampleOffset) / (RESOLVE_FILTER_DIAMETER / 2.0f);

				@property(NumberOfMultisamples)
					bool useSample = (sampleDist.x <= 1.0f && sampleDist.y <= 1.0f);
				@end
				@property(!NumberOfMultisamples)
					bool useSample = true;
				@end

				if (useSample)
				{
					float3 sampleValue = MSAA_LOAD(ColorMap, samplePosition, subSampleIndex).xyz;
					sampleValue = max(sampleValue, 0.0f);

					float weight = ResolveFilter(sampleDist.x) * ResolveFilter(sampleDist.y);
					clrMin = min(clrMin, sampleValue);
					clrMax = max(clrMax, sampleValue);

					float sampleLum = ColorToLuminance(sampleValue);

					// Inverse luminance filtering
					weight *= 1.0f / (1.0f + sampleLum);

					sum += sampleValue * weight;
					totalWeight += weight;

					m1 += sampleValue;
					m2 += sampleValue * sampleValue;
					mWeight += 1.0f;
				}
			}
		}
	}

	@property(NumberOfMultisamples)
		float3 result = sum / max(totalWeight, 0.00001f);
		float alpha = SAMPLE_2D_MS(ColorMap, int2(FRAGMENT_POSITION.xy), 0).a;
	@end
	@property(!NumberOfMultisamples)
		float4 color = TEXTURE_FETCH_2D(ColorMap, int3(fragmentPosition, 0));
		float3 result = color.rgb;
		float alpha = color.a;
	@end

	result = max(result, float3(0.0f, 0.0f, 0.0f));

	// Avoid floating point division by zero
	if (0.0f == mWeight)
	{
		mWeight = 0.001f;
	}

	{ // Temporal AA
		float3 currentColor = result;
		float3 previousColor = Reproject(fragmentPosition);

		{ // Clamp mode: Variance clip
			float3 mu = m1 / mWeight;
			float3 sigma = sqrt(abs(m2 / mWeight - mu * mu));
			float3 minc = mu - VARIANCE_CLIP_GAMMA * sigma;
			float3 maxc = mu + VARIANCE_CLIP_GAMMA * sigma;
			previousColor = ClipAabb(minc, maxc, previousColor);
		}

		float weightA = SATURATE(1.0f - TEMPORAL_AA_BLEND_FACTOR);
		float weightB = SATURATE(TEMPORAL_AA_BLEND_FACTOR);

		// Inverse luminance filtering
		weightA *= 1.0f / (1.0f + ColorToLuminance(currentColor));
		weightB *= 1.0f / (1.0f + ColorToLuminance(previousColor));

		result = (currentColor * weightA + previousColor * weightB) / (weightA + weightB);
	}

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(result.rgb, alpha);
MAIN_END
