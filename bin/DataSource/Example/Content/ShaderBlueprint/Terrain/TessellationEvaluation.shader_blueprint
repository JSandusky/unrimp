/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


// This software contains source code provided by NVIDIA Corporation. The height map terrain tessellation implementation is basing on "DirectX 11 Terrain Tessellation" by Iain Cantlay ( https://developer.nvidia.com/sites/default/files/akamai/gamedev/files/sdk/11/TerrainTessellation_WhitePaper.pdf ) and the concrete implementation "TerrainTessellation"-sample inside "NVIDIA Direct3D SDK 11" ( https://developer.nvidia.com/dx11-samples ).


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece($ProjectName/ShaderPiece/Terrain.asset)
	@insertpiece(DefineTerrainPassDataStruct)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Per patch input
INPUT_BEGIN_PATCH
	INPUT_TESS_LEVEL_INNER(2)	// Inner tessellation level
	INPUT_TESS_LEVEL_OUTER(4)	// Outer tessellation level
	DECLARE_TESS_COORD(float2)
INPUT_END_PATCH

// Per patch control point input / output
INPUT_BEGIN
	INPUT_POSITION(0, float4, INPUT_ARRAY(PositionTC))	// World space control point position of the patch we received from the tessellation control shader (TCS) as input
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 					  0)	// Texture coordinate
	OUTPUT_TEXTURE_COORDINATE(2, float3, PreviousClipSpacePositionVS, 1)	// Previous clip space position
	OUTPUT_TEXTURE_COORDINATE(3, float3, WorldSpacePosition, 		  2)	// World space position
	OUTPUT_POSITION			 (0)											// Interpolated world space vertex position inside the patch as output
OUTPUT_END

// Uniform buffers
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	TerrainPassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(2, 0, HeightMap, 1)

// Samplers
SAMPLER_STATE(3, 1, SamplerLinearClamp, 1)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
// From shader piece "$ProjectName/ShaderPiece/Terrain.asset"
	@insertpiece(DefineWorldXZToHeightUV)
	@insertpiece(DefineSampleHeightMap)

float4 Bilerp(float4 v0, float4 v1, float4 v2, float4 v3, float2 i)
{
	float4 bottom = LERP(v0, v3, i.x);
	float4 top    = LERP(v1, v2, i.x);
	return LERP(bottom, top, i.y);
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
@property(HLSL)
	[domain("quad")]
@end
@property(GLSL)
	layout(quads, fractional_even_spacing, ccw) in;	// Not "cw" by intent
@end
MAIN_BEGIN_TESSELLATION_EVALUATION(4)
	// Bilerp the position
	float4 worldSpacePosition = Bilerp(MAIN_INPUT_ARRAY(PositionTC, 0), MAIN_INPUT_ARRAY(PositionTC, 1), MAIN_INPUT_ARRAY(PositionTC, 2), MAIN_INPUT_ARRAY(PositionTC, 3), TESS_COORD.xy);
	worldSpacePosition.w = 1.0f;

	// Apply height map
	worldSpacePosition.y = SampleHeightMap(worldSpacePosition.xz);

	// Transform to clip-space
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToClipSpaceMatrix, worldSpacePosition);

	// Texture coordinate
	MAIN_OUTPUT(TexCoord) = WorldXZToHeightUV(worldSpacePosition.xz);

	{ // Previous clip space position
		float4 previousPiewSpacePosition = MATRIX_MUL(PassData.PreviousWorldSpaceToViewSpaceMatrix, worldSpacePosition);
		MAIN_OUTPUT(PreviousClipSpacePositionVS) = MATRIX_MUL(PassData.ViewSpaceToClipSpaceMatrix, previousPiewSpacePosition).xyw;
	}

	// World space position
	MAIN_OUTPUT(WorldSpacePosition) = worldSpacePosition.xyz;
MAIN_END
