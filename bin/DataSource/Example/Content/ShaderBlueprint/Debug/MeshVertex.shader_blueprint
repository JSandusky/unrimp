/*********************************************************\
 * Copyright (c) 2012-2018 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece($ProjectName/ShaderPiece/Skinning.asset)
 

//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN_VERTEX
	INPUT_VERTEX_POSITION(0, float3, Position)				// Object space vertex position
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 0)		// 32 bit texture coordinate
	INPUT_TEXTURE_COORDINATE(2, int4, QTangent, 1)			// 16 bit QTangent, not needed but added to avoid Vulkan warning "Vertex attribute at location <x> not consumed by vertex shader"
	INPUT_VERTEX_DRAW_ID(3)									// Draw ID
	@property(UseGpuSkinning)
		INPUT_VERTEX_BLEND_INDICES(4, uint4, BlendIndices)	// 8 bit bone indices
		INPUT_VERTEX_BLEND_WEIGHTS(5, uint4, BlendWeights)	// 8 bit bone weights
	@end
INPUT_END_VERTEX
OUTPUT_BEGIN_VERTEX
	OUTPUT_TEXTURE_COORDINATE_NOINTERPOLATION(1, uint,   AssignedMaterialSlotVS, 0)	// The assigned material slot inside the material uniform buffer
	OUTPUT_TEXTURE_COORDINATE				 (2, float2, TexCoordVS,			 1)	// Texture coordinate
	OUTPUT_POSITION							 (0)									// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END_VERTEX

// Uniform buffers
struct PassDataStruct
{
	float4x4 WorldSpaceToClipSpaceMatrix[2];
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END
UNIFORM_BUFFER_BEGIN(2, 0, InstanceUniformBuffer, 2)
	// x = The instance texture buffer start index
	// y = The assigned material slot inside the material uniform buffer
	// z = The custom parameters start index inside the instance texture buffer
	// w = Unused
	uint4 InstanceIndicesArray[FAST_SHADER_BUILD_HACK(4096)];	// 64 KiB
UNIFORM_BUFFER_END

// Texture buffers
// -> We're using base shader register 3 instead of 0 to be compatible to the OpenGL ES 3 renderer backend texture buffer emulation, which is using an uniform buffer for the emulation
TEXTURE_BUFFER(2, 1, float4, InstanceTextureBuffer, 3)	// "POSITION_ROTATION_SCALE"


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/TangentFrame.asset)
	@insertpiece(DefineGetTangentFrame)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN_VERTEX
	// Get object space to world space data
	uint4  instanceIndices	  = InstanceIndicesArray[MAIN_INPUT_DRAW_ID_VERTEX];
	float3 position			  = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x).xyz;
	float4 rotationQuaternion = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x + 1u);
	float3 scale			  = TEXTURE_BUFFER_FETCH(InstanceTextureBuffer, instanceIndices.x + 2u).xyz;

	// Get the object space position
	float3 objectSpacePosition = MAIN_INPUT(Position);

	// GPU skinning
	@property(UseGpuSkinning)
	{
		@insertpiece(GetObjectSpaceToWorldSpaceMatrix)
	}
	@end

	// Calculate the world space vertex position
	float3 worldSpacePosition = MultiplyQuaternionVector(rotationQuaternion, objectSpacePosition * scale) + position;

	// Calculate the clip space vertex position, left/bottom is (-1,-1) and right/top is (1,1)
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.WorldSpaceToClipSpaceMatrix[MAIN_INPUT_STEREO_EYE_INDEX], float4(worldSpacePosition, 1.0f));

	// Pass through the assigned material slot inside the material uniform buffer
	MAIN_OUTPUT(AssignedMaterialSlotVS) = instanceIndices.y;

	// Pass through the 32 bit texture coordinate
	MAIN_OUTPUT(TexCoordVS) = MAIN_INPUT(TexCoord);
MAIN_END_VERTEX
