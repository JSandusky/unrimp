/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece($ProjectName/ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_VERTEX_POSITION	(0, float2, Position)		// GUI space vertex position as input
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoord, 0)	// 32 bit texture coordinate
	INPUT_VERTEX_COLOR	 	(2, float4, Color)			// Vertex color
INPUT_END
OUTPUT_BEGIN
	OUTPUT_TEXTURE_COORDINATE(1, float4, TexCoordVS, 0)	// xy = glyph texture coordinate, zw = background texture coordinate
	OUTPUT_TEXTURE_COORDINATE(2, float4, ColorVS, 1)	// Vertex color
	OUTPUT_POSITION			 (0)						// Clip space vertex position as output, left/bottom is (-1,-1) and right/top is (1,1)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4x4 ObjectSpaceToClipSpaceMatrix;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Calculate the clip space vertex position, lower/left is (-1,-1) and upper/right is (1,1)
	MAIN_OUTPUT_POSITION = MATRIX_MUL(PassData.ObjectSpaceToClipSpaceMatrix, float4(MAIN_INPUT(Position), 0.0f, 1.0f));

	// Pass through the texture coordinates
	float y = MAIN_OUTPUT_POSITION.y;
	@property(HLSL)
		y = -y;
	@end
	MAIN_OUTPUT(TexCoordVS) = float4(MAIN_INPUT(TexCoord), MAIN_OUTPUT_POSITION.x * 0.5f + 0.5f, y * 0.5f + 0.5f);

	// Pass through the vertex color
	MAIN_OUTPUT(ColorVS) = MAIN_INPUT(Color);
MAIN_END
