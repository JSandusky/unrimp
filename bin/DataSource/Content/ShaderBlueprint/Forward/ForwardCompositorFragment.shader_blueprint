/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
	INPUT_TEXTURE_COORDINATE(2, float3, ViewRayVS,  1)	// View space ray used for view space position reconstruction
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float4   ViewSpaceFrustumCorners[4];
	float4x4 ClipSpaceToViewSpaceMatrix;
	float3	 ViewSpaceSunlightDirection;
	float	 AtmosphereFogDensity;
	float3	 AmbientColor;
	float3	 SunlightColor;
	float3   DiffuseFogColor;
	float2	 InverseViewportSize;
	float2	 ProjectionParameters;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, ColorMap, 0)
@property(NumberOfMultisamples)
	TEXTURE_2D_MS(1, 1, DepthMap, @value(NumberOfMultisamples), 1)
@end
@property(!NumberOfMultisamples)
	TEXTURE_2D(1, 1, DepthMap, 1)
@end
TEXTURE_2D(1, 2, ScreenSpaceAmbientOcclusionMap, 2)

// Samplers
SAMPLER_STATE(2, 0, SamplerPointClamp, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Color.asset)
	@insertpiece(DefineCalculateFoggedColor)
@includepiece(ShaderPiece/Depth.asset)
	@insertpiece(DefineGetLinearDepth)
	@insertpiece(DefineGetDepthFromDepthMap)

float3 CalculateColor(float3 viewRay, float3 color, float screenSpaceAmbientOcclusion, float2 screenSpacePosition, int sampleIndex)
{
	// Read depth map value and check whether or not a depth value was written (depth = 1 = depth clear value)
	float depth = GetDepthFromDepthMap(screenSpacePosition, sampleIndex);
	if (1.0f != depth)
	{
		// Scale the view ray by the ratio of the linear z value to the projected view ray
		// -> For details see "The Danger Zone" - "Position From Depth 3: Back In The Habit" - "Written by MJPSeptember 5, 2010" - https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/
		float3 viewSpacePosition = viewRay * (GetLinearDepth(depth) / dot(float3(0.0f, 0.0f, 1.0f), viewRay));

		// Calculate fogged color
		return CalculateFoggedColor(viewSpacePosition, color * screenSpaceAmbientOcclusion);
	}
	else
	{
		// Sky
		return color;
	}
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	// Get color and screen space ambient occlusion value
	float4 color = SAMPLE_2D_LOD(ColorMap, SamplerPointClamp, float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f));
	float screenSpaceAmbientOcclusion = SAMPLE_2D_LOD(ScreenSpaceAmbientOcclusionMap, SamplerPointClamp, float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f)).r;

	// Get the normalized view ray
	float3 viewRay = normalize(MAIN_INPUT(ViewRayVS));

	// Calculate fragment color
	@property(NumberOfMultisamples)
		// Complex pixel detection
		float3 finalColor;
		if (0 != color.a)
		{
			// Custom MSAA resolve
			finalColor = float3(0.0f, 0.0f, 0.0f);
			@foreach(NumberOfMultisamples, i, 0)
			{
				finalColor += CalculateColor(viewRay, color.rgb, screenSpaceAmbientOcclusion, MAIN_INPUT(TexCoordVS), @i);
			}
			@end
			finalColor /= @value(NumberOfMultisamples);
		}
		else
		{
			finalColor = CalculateColor(viewRay, color.rgb, screenSpaceAmbientOcclusion, MAIN_INPUT(TexCoordVS), 0);
		}
	@end
	@property(!NumberOfMultisamples)
		float3 finalColor = CalculateColor(viewRay, color.rgb, screenSpaceAmbientOcclusion, MAIN_INPUT(TexCoordVS), 0);
	@end
	
	// Done
	MAIN_OUTPUT_COLOR(0) = float4(finalColor, color.a);
MAIN_END
