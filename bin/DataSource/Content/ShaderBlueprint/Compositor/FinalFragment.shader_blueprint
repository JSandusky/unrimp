/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)
@includepiece(ShaderPiece/Fxaa.asset) 
	@property(Fxaa)
		#define FXAA_PC				 1
		@property(HLSL)
			#define FXAA_HLSL_5		 1
		@end
		@property(GLSL || GLSLES)
			#define FXAA_GLSL_130	 1
		@end
		#define FXAA_QUALITY__PRESET 39
		#define FXAA_GREEN_AS_LUMA	 1
		@insertpiece(FxaaFunction)
	@end


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
	INPUT_TEXTURE_COORDINATE(1, float2, TexCoordVS, 0)	// Texture coordinate
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float2 InverseViewportSize;
	float  GlobalTimeInSeconds;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(0, 1, ColorMap, 0)
TEXTURE_3D(0, 2, ColorCorrectionLookupTableMap, 1)

// Samplers
SAMPLER_STATE(1, 0, SamplerLinear, 0)


//[-------------------------------------------------------]
//[ Functions                                             ]
//[-------------------------------------------------------]
// Iestyn's RGB dither (7 asm instructions) from Portal2 X360, slightly modified for VR
// -> See "Iestyn's RGB dither" - https://www.shadertoy.com/view/MtBGDD
// -> See "Advanced VR Rendering" - http://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf - page 49
// -> "Valve's screen space dither" https://www.shadertoy.com/view/4dcSRX - shows the effect nicely
float3 ScreenSpaceDither(float2 screenPosition)
{
	float ditherFactor = dot(float2(171.0f, 231.0f), screenPosition.xy + PassData.GlobalTimeInSeconds);
	float3 dither = float3(ditherFactor, ditherFactor, ditherFactor);
	dither.rgb = frac(dither.rgb / float3(103.0f, 71.0f, 97.0f)) - float3(0.5f, 0.5f, 0.5f);
	return (dither.rgb / 255.0f) * 0.375f;
}


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	float4 color = float4(0.0f, 0.0f, 0.0f, 1.0f);

	// Fast Approximate Anti-Aliasing (FXAA)
	@property(Fxaa)
		// Shader language dependent texture handling
		@property(HLSL)
			FxaaTex fxaaTex;
			fxaaTex.smpl = SamplerLinear;
			fxaaTex.tex = ColorMap;
		@end
		@property(GLSL || GLSLES)
			#define fxaaTex ColorMap
		@end

		// Set values to calculate the amount of anti aliasing applied
		color = FxaaPixelShader(
			MAIN_INPUT(TexCoordVS),				// pos
			float4(0.0f, 0.0f, 0.0f, 0.0f),		// fxaaConsolePosPos (?)
			fxaaTex,							// tex
			fxaaTex,							// fxaaConsole360TexExpBiasNegOne
			fxaaTex,							// fxaaConsole360TexExpBiasNegTwo
			float2(PassData.InverseViewportSize.x, PassData.InverseViewportSize.y),	// fxaaQualityRcpFrame
			float4(0.0f, 0.0f, 0.0f, 0.0f),		// fxaaConsoleRcpFrameOpt
			float4(0.0f, 0.0f, 0.0f, 0.0f),		// fxaaConsoleRcpFrameOpt2
			float4(0.0f, 0.0f, 0.0f, 0.0f),		// fxaaConsole360RcpFrameOpt2
			0.75f,								// fxaaQualitySubpix
			0.166f,								// fxaaQualityEdgeThreshold
			0.0833f,							// fxaaQualityEdgeThresholdMin
			0.0f,								// fxaaConsoleEdgeSharpness
			0.0f,								// fxaaConsoleEdgeThreshold
			0.0f,								// fxaaConsoleEdgeThresholdMin
			float4(0.0f, 0.0f, 0.0f, 0.0f)		// fxaaConsole360ConstDir
		);
		color.w = 1.0f;
	@end
	@property(!Fxaa)
		color = SAMPLE_2D_LOD(ColorMap, SamplerLinear, float4(MAIN_INPUT(TexCoordVS), 0.0f, 0.0f));
	@end

	// Apply screen space dither
	color.rgb += ScreenSpaceDither(MAIN_INPUT(TexCoordVS) * (1.0f / PassData.InverseViewportSize));

	// Ensure we're in a 0..1 range
	color = SATURATE(color);

	{ // Apply 3D identity color correction lookup table (LUT)
	  // - Basing on "GPU Gems 2" - "Chapter 24. Using Lookup Tables to Accelerate Color Transformations" by Jeremy Selan, Sony Pictures Imageworks - http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter24.html
	  // - A way for artists to create color correction lookup tables is described at https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/ColorGrading/
	  // - Color correction lookup table size is 16
	  // - We don't have a texel offset like in DirectX 9 which we need to take care of
		float3 LUT_SIZE = float3(16.0f, 16.0f, 16.0f);
		float3 LUT_OFFSET = 1.0f / (2.0f * LUT_SIZE);
		color.rgb = SAMPLE_3D_LOD(ColorCorrectionLookupTableMap, SamplerLinear, float4(color.rgb + LUT_OFFSET, 0.0f)).rgb;
	}
	
	// Done
	MAIN_OUTPUT_COLOR(0) = color;
MAIN_END
