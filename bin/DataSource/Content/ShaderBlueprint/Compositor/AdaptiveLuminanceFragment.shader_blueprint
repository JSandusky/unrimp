/*********************************************************\
 * Copyright (c) 2012-2017 The Unrimp Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
\*********************************************************/


//[-------------------------------------------------------]
//[ Definitions                                           ]
//[-------------------------------------------------------]
@includepiece(ShaderPiece/Core.asset)
	@insertpiece(SetCrossPlatformSettings)


//[-------------------------------------------------------]
//[ Input / output                                        ]
//[-------------------------------------------------------]
// Attribute input / output
INPUT_BEGIN
INPUT_END
OUTPUT_BEGIN
	OUTPUT_COLOR(0)
OUTPUT_END

// Uniform buffers
struct PassDataStruct
{
	float AdaptationRate;	// Tau
	float PastSecondsSinceLastFrame;
};
UNIFORM_BUFFER_BEGIN(0, 0, PassUniformBuffer, 0)
	PassDataStruct PassData;
UNIFORM_BUFFER_END

// Textures
TEXTURE_2D(1, 0, CurrentLuminanceMap, 0)
TEXTURE_2D(1, 1, PreviousLuminanceMap, 1)

// Samplers
SAMPLER_STATE(2, 0, SamplerPoint, 0)


//[-------------------------------------------------------]
//[ Main                                                  ]
//[-------------------------------------------------------]
MAIN_BEGIN
	float currentAverageLuminance = exp(SAMPLE_2D_LOD(CurrentLuminanceMap, SamplerPoint, float4(0.5f, 0.5f, 0.0f, 10.0f)).r);

	// During the first execution there's no valid previous adaptive luminance available, so use the just calculated luminance as previous luminance
	@property(FirstExecution)
		float adaptiveLuminance = currentAverageLuminance;
	@end
	@property(!FirstExecution)
		float previousAverageLuminance = SAMPLE_2D_LOD(PreviousLuminanceMap, SamplerPoint, float4(0.5f, 0.5f, 0.0f, 0.0f)).r;

		// Adapt the luminance using Pattanaik's technique
		float adaptiveLuminance = previousAverageLuminance + (currentAverageLuminance - previousAverageLuminance) * (1.0f - exp(-PassData.PastSecondsSinceLastFrame * PassData.AdaptationRate));
	@end

	// Done
	MAIN_OUTPUT_COLOR(0) = float4(adaptiveLuminance, 1.0f, 1.0f, 1.0f);
MAIN_END
